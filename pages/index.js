import Head from "next/head";
import React, { useState, useEffect } from "react";
import styles from "../styles/Home.module.css";
import Header from "../comps/Header";
import _ from "lodash";
import Box from "@mui/material/Box";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select from "@mui/material/Select";

export default function Home() {
  const [fetchedData, setFetchedData] = useState([]);
  const [currentlyOpenedModule, setCurrentlyOpenedModule] = useState();
  const [moduleKeys, setModuleKeys] = useState([]);
  const [sortBy, setSortBy] = useState();
  const [entriesMarkedAsFinished, setEntriesMarkedAsFinished] = useState({
    movies: {},
    games: {},
    books: {},
    comics: {},
    series: {},
  });

  useEffect(() => {
    let btns = document.getElementsByClassName("navbtn");
    for (const btn of btns) {
      btn.style.color = "white";
    }

    if (currentlyOpenedModule)
      document.getElementById(currentlyOpenedModule).style.color = "#ffe81f";
  }, [currentlyOpenedModule]);

  function displayData(e) {
    setCurrentlyOpenedModule(e.target.id);
    fetchData(e.target.id);
  }

  function fetchData(target) {
    fetch("./data/" + target + ".json")
      .then((response) => response.json())
      .then((data) => {
        setFetchedData(data);
        setModuleKeys(Object.keys(data[0]));
      });
  }

  function orderBy(event, order = "asc") {
    setFetchedData(_.orderBy(fetchedData, event.target.value, order));
  }

  function markEntryAsFinished(event, entry) {
    let title = entry.title.replace(/\s+/g, "-").toLowerCase();
    let btn = document.querySelector("#" + title + "btn");
    let card = document.getElementById(title + "-card");
    card.classList.toggle("finished");
    if (card.classList.contains("finished"))
      btn.innerText = "Mark as Unfinished";
    if (!card.classList.contains("finished"))
      btn.innerText = "Mark as Finished";
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header displayData={displayData} />

      <div id={styles.viewer}>
        <div id={styles.sortContainer}>
          <button>Filters</button>
          <Box sx={{ marginLeft: "auto" }}>
            <FormControl sx={{ width: "200px" }}>
              <InputLabel>Sort By</InputLabel>
              <Select value={sortBy} label="Sort By" onChange={orderBy}>
                <MenuItem value={"title"}>Title</MenuItem>
                <MenuItem value={"releaseDate"}>Date</MenuItem>
                {"author" in fetchedData[0] ? (
                  <MenuItem value={"author"}>Author</MenuItem>
                ) : null}
                {"seasons" in fetchedData[0] ? (
                  <MenuItem value={"seasons"}>Seasons</MenuItem>
                ) : null}
                {"episodes" in fetchedData[0] ? (
                  <MenuItem value={"episodes"}>Episodes</MenuItem>
                ) : null}
                {"createdBy" in fetchedData[0] ? (
                  <MenuItem value={"createdBy"}>Created By</MenuItem>
                ) : null}
                {"era" in fetchedData[0] ? (
                  <MenuItem value={"era"}>Era</MenuItem>
                ) : null}
                {"isCanon" in fetchedData[0] ? (
                  <MenuItem value={"isCanon"}>Canonicity</MenuItem>
                ) : null}
              </Select>
            </FormControl>
          </Box>
        </div>

        <div id={styles.moduleContainer}>
          {fetchedData.map((e1, i1) => {
            return (
              <div
                className={styles.card}
                id={e1.title.replace(/\s+/g, "-").toLowerCase() + "-card"}
                key={"1" + i1}
              >
                {moduleKeys.map((e2, i2) => {
                  let currentKey = moduleKeys[i2];
                  let currentValue = e1[currentKey];
                  return (
                    <div key={"2" + i2}>
                      {currentKey === "coverImage" ? (
                        <div className={styles.coverImageContainer}>
                          <img
                            className={styles.coverImage}
                            src={currentValue}
                          />
                        </div>
                      ) : currentKey === "links" ? (
                        <div className={styles.linksContainer}>
                          {Object.keys(currentValue).map((e3, i3) => {
                            return (
                              <a
                                href={currentValue[e3].link}
                                key={"3" + i3}
                                rel="nofollow noopener"
                              >
                                <img
                                  src={currentValue[e3].icon}
                                  style={{
                                    width: "35px",
                                    aspectRatio: "1/1",
                                    objectFit: "cover",
                                    margin: "10px",
                                    padding: "5px",
                                  }}
                                />
                              </a>
                            );
                          })}
                        </div>
                      ) : currentKey === "isCanon" ? null : (
                        <h2>{currentKey.replace(/([A-Z])/g, " $1")}:</h2>
                      )}

                      {typeof currentValue === "string" &&
                      currentKey !== "coverImage" ? (
                        <p>{currentValue}</p>
                      ) : null}

                      {currentKey === "isCanon" ? (
                        currentValue ? (
                          <div className={styles.canonDiv}>
                            <h3 className={styles.canon}>Canon</h3>
                          </div>
                        ) : (
                          <div className={styles.legendsDiv}>
                            <h3 className={styles.legends}>Legends</h3>
                          </div>
                        )
                      ) : null}
                    </div>
                  );
                })}
                <button
                  onClick={(e) => markEntryAsFinished(e, e1)}
                  className={styles.finishedBtn}
                  id={e1.title.replace(/\s+/g, "-").toLowerCase() + "btn"}
                >
                  Mark as Finished
                </button>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}
